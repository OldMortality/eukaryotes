coord_flip() +
geom_hline(yintercept=0.95,colour='red',linetype = "dashed") +
ylab('Percentage of samples not zero') +
xlab('') +
expand_limits(y=c(0,1)) +
labs(title = phylum, subtitle = "bootstrap probability of not 0")
i = 1
process_bootstraps <- function(phylum,bm2,var.names) {
dim(bm2)
library(ggplot2)
dim(bm2)
# dat <- stack(as.data.frame(t(bm2)))
# colnames(dat)[1] <- 'Estimates'
# plot.est <-ggplot(dat) +
#   geom_boxplot(aes(x = ind, y = Estimates)) +
#   coord_flip() +
#   scale_x_discrete(name='predictors',
#                    labels=var.names) +
#   ylab('LASSO estimate') +
#   xlab('predictor') +
#   labs(title = phylum, subtitle = "Bootstrap estimates")
not.zero <- vector()
for (i in 1:dim(bm2)[1]) {
not.zero[i] <- length(which(bm2[i,] != 0))
}
not.zero <- not.zero/ 1000
not.zero
df.prop <- data.frame(x=var.names,
y=not.zero)
head(df.prop)
my.color = 'deepskyblue4'
plot.zeros <- ggplot(data=df.prop) + geom_col(aes(x=x,y=y),fill=my.color, colour=my.color) +
coord_flip() +
geom_hline(yintercept=0.95,colour='red',linetype = "dashed") +
ylab('Percentage of samples not zero') +
xlab('') +
expand_limits(y=c(0,1)) +
labs(title = phylum, subtitle = "bootstrap probability of not 0")
plot.zeros
lower <- vector()
upper <- vector()
for (i in 1:dim(bm2)[1]) {
ci <- quantile(bm2[i,],c(0.025,0.975),na.rm=T)
lower[i] <- ci[1]
upper[i] <- ci[2]
}
d <- data.frame(varnames = var.names,lower=lower,upper=upper)
plot.ci <- ggplot(data=d) + geom_segment(aes(y=varnames,
yend=varnames,
x=lower,
xend=upper), colour=my.color) +
ylab('') +
xlab('95% confidence interval') +
geom_vline(xintercept=0,colour='red',linetype = "dashed") +
labs(title = "", subtitle = "")
plot.ci
cis <- data.frame(x=var.names,
lower=round(lower,3),
upper=round(upper,3))
return(list(phylum = phylum,
plot.zeros = plot.zeros,
plot.ci = plot.ci,
cis = cis))
}
# par(mfrow=c(1,1))
# quantile(bm2[9,],c(0.025,0.975))
# quantile(bm2[9,],c(0.05,0.95))
#
# hist(bm2[9,])
# boxplot(bm2[9,],main=var.names[9])
# abline(h=0,col='red')
# segments(x0=1,
#          x1=1,
#          y0=quantile(bm2[9,],0.05),
#          y1=quantile(bm2[9,],0.95),
#          col='blue')
#
#
# par(mfrow=c(4,4))
# for (i in 1:16) {
#   boxplot(bm2[i,],main=var.names[i])
# }
#
# boxplot(bm2, use.cols = FALSE,yaxt='n',horizontal=T)
# axis(side=2,at=seq(1,16),labels=var.names,las=2)
# abline(h=0,col='blue')
#
#
#
# plot('',xlim=c(1,17),ylim=c(-2,10),xaxt='n',xlab='')
# axis(side=1,at=seq(1,17),labels=colnames(x),las=2)
#
# for (j in 1:17) {
#   #segments(j,quantile(bm[j,],0.025),j,quantile(bm[j,],0.975),col='red')
#   print(paste(j,colnames(x)[j],round(quantile(bm[j,],0.025),3),round(quantile(bm[j,],0.975),3)))
# }
# abline(h=0)
# x <- c('z','a')
# y <- c(26,1)
# d <- data.frame(x=x,y=y)
# d$x
plot.zeros
i = 1
##
## makes the plots from the bootstrap results.
##
rm(list=ls())
library(gridExtra)
setwd("C:/Users/Michel/Documents/eukaryotes/rscripts")
source('boots_processing_1.R')
load(file='varnames.RData')
phyls <- c('Arthropoda',
'Bacillariophyta',
'Cercozoa',
'Chytridiomycota',
'Nematoda',
'Streptophyta',
'Ascomycota',
'Basidiomycota',
'Chlorophyta',
'Ciliophora',
'Rotifera',
'Tardigrada')
ph <- phyls[i]
fname <- paste0('../boots/',ph,'.RData')
load(file=fname)
##
## makes the plots from the bootstrap results.
##
rm(list=ls())
library(gridExtra)
setwd("C:/Users/Michel/Documents/eukaryotes/rscripts")
source('boots_processing_1.R')
load(file='varnames.RData')
phyls <- c('Arthropoda',
'Bacillariophyta',
'Cercozoa',
'Chytridiomycota',
'Nematoda',
'Streptophyta',
'Ascomycota',
'Basidiomycota',
'Chlorophyta',
'Ciliophora',
'Rotifera',
'Tardigrada')
ps <- list()
for (i in 1:length(phyls)) {
ph <- phyls[i]
fname <- paste0('../boots/',ph,'.RData')
load(file=fname)
ps[[i]] <- process_bootstraps(phylum=ph,
bm2=bm2,
var.names=var.names)
}
for (i in 1:length(phyls)) {
p1a <- ps[[i]]$plot.zeros
p1b <- ps[[i]]$plot.ci
p.combined <- grid.arrange(p1a,p1b,ncol=2)
ggsave(p.combined, file=paste0("../images/boots2_",phyls[i],".bmp"),
device="bmp",dpi=800,
width=200,height=100,units='mm')
}
# load(file="allstats.RData")
# all.stats[[2]]
version()
version
citation(glmnet)
library(glmnet)
citation("glmnet")
library(xgboost)
library(glmnet)
library(pROC)
setwd("C:/Users/Michel/Documents/eukaryotes/rscripts")
source('euk_functions.R')
set.seed(123)
l <- as.data.frame(loadData())
f <- create.df.species()
ph <- sort(unique(f$phylum))
ph
i = 24
phylum=ph[i]
df=f
print(phylum)
xg.acc=NULL
auc.test=NULL
imp=NULL
toofew <- FALSE
s <- getAllByPhylum(df=df,phylum=phylum)
presence.table <- table(s$distinct.otus>0,s$Location)
s2 <- s
ix <- which(colnames(s2) %in% c("Sample", "AMMN","NITR","PHOS","CARB","QUARTZ"))
s2 <- s2[,-ix]
s2$Mawson <- 0
s2[which(s2$Location=="Mawson Escarpment"),"Mawson"] <- 1
s2$Menzies <- 0
s2[which(s2$Location=="Mount Menzies"),"Menzies"] <- 1
s2$Location <- NULL
s2 <- s2[complete.cases(s2),]
colnames(s2)
s2 <- s
ix <- which(colnames(s2) %in% c("Sample", "AMMN","NITR","PHOS","CARB","QUARTZ"))
s2 <- s2[,-ix]
s2$Mawson <- 0
s2[which(s2$Location=="Mawson Escarpment"),"Mawson"] <- 1
s2$Menzies <- 0
s2[which(s2$Location=="Mount Menzies"),"Menzies"] <- 1
s2$Location <- NULL
s2 <- s2[complete.cases(s2),]
# presence
y <- as.numeric(s2$distinct.otus > 0)
distinct.otus <- s2$distinct.otus
s2$distinct.otus <- NULL
# scale all columns
for ( j in 1:dim(s2)[2]) {
s2[,j] <- (s2[,j] - mean(s2[,j],na.rm=T)) /sqrt(var(s2[,j],na.rm=T))
}
x=as.matrix(s2)
var.names <- colnames(s2)
n = dim(x)[1]
p = dim(x)[2]
###
### xgboost
###
xg.acc=NULL
auc.test=NULL
imp=NULL
# back to using s. We can handle missing data now
y <- as.numeric(s$distinct.otus > 0)
y
w <-  rep(mean(y), length(y))
w[y == 1] <- (1 - mean(y))
xgtrain <- xgb.DMatrix(cbind(makedummy(s$Location),
slope = s$SLOPE,
pota = s$POTA,
sulph = s$SULPH,
cond = s$COND,
ph = s$PH_CACL,
rlu = s$RLU,
feldspar = s$FELDSPAR,
titanite = s$TITANITE,
garnets = s$GARNETS,
micas = s$MICAS,
dolomite = s$DOLOMITE,
kaolchlor = s$KAOLCHLOR,
calcite = s$CALCITE,
chlorite = s$CHLORITE),
label=y, weight = w)
param <- list(max_depth = 5, eta = 0.1, nthread = 4, gamma = 5,
min_child_weight = 0,
objective = "binary:logistic",
eval_metric = "logloss",
#scale_pos_weight = w,
subsample = 1, colsample_bytree = 0.6)
bstx <- xgb.cv(param, xgtrain, nrounds = 200, nfold = n,
early_stopping_rounds = 20, verbose = T, prediction = T)
best.iteration = bstx$best_iteration
bsty <- xgb.train(param, xgtrain, nrounds =best.iteration,
verbose = FALSE)
pred.train <- predict(bsty, xgtrain)
roc.train <- pROC::roc(y,pred.train,plot=F)
# out of fold predictions
bstx <- xgb.cv(param, xgtrain, nrounds = best.iteration, nfold = n,
early_stopping_rounds = 20, verbose = F, prediction = T)
roc.test <- pROC::roc(y,bstx$pred,plot=T)
auc.test <- pROC::auc(roc.test)
auc.test
zcoords1 <- pROC::coords(roc.test, x = "best",
ret = "all",
best.method = "youden",
transpose = FALSE)
thr <- as.numeric(zcoords1[1])
t <- table((bstx$pred > thr), y)
if (dim(t)[1] == 2) {
err = (t[1,2]+t[2,1])/sum(t)
xg.acc <- print(paste("out of fold accuracy", 1-err))
} else {
xg.acc <- NULL
}
imp <- NULL
try (imp <- xgb.importance(feature_names = bsty$feature_names, model = bsty))
if (doML) {
# back to using s. We can handle missing data now
y <- as.numeric(s$distinct.otus > 0)
w <-  rep(mean(y), length(y))
w[y == 1] <- (1 - mean(y))
xgtrain <- xgb.DMatrix(cbind(makedummy(s$Location),
slope = s$SLOPE,
pota = s$POTA,
sulph = s$SULPH,
cond = s$COND,
ph = s$PH_CACL,
rlu = s$RLU,
feldspar = s$FELDSPAR,
titanite = s$TITANITE,
garnets = s$GARNETS,
micas = s$MICAS,
dolomite = s$DOLOMITE,
kaolchlor = s$KAOLCHLOR,
calcite = s$CALCITE,
chlorite = s$CHLORITE),
label=y, weight = w)
param <- list(max_depth = 5, eta = 0.1, nthread = 4, gamma = 5,
min_child_weight = 0,
objective = "binary:logistic",
eval_metric = "logloss",
#scale_pos_weight = w,
subsample = 1, colsample_bytree = 0.6)
bstx <- xgb.cv(param, xgtrain, nrounds = 200, nfold = n,
early_stopping_rounds = 20, verbose = T, prediction = T)
best.iteration = bstx$best_iteration
bsty <- xgb.train(param, xgtrain, nrounds =best.iteration,
verbose = FALSE)
pred.train <- predict(bsty, xgtrain)
roc.train <- pROC::roc(y,pred.train,plot=F)
# out of fold predictions
bstx <- xgb.cv(param, xgtrain, nrounds = best.iteration, nfold = n,
early_stopping_rounds = 20, verbose = F, prediction = T)
roc.test <- pROC::roc(y,bstx$pred,plot=T)
auc.test <- pROC::auc(roc.test)
zcoords1 <- pROC::coords(roc.test, x = "best",
ret = "all",
best.method = "youden",
transpose = FALSE)
thr <- as.numeric(zcoords1[1])
t <- table((bstx$pred > thr), y)
if (dim(t)[1] == 2) {
err = (t[1,2]+t[2,1])/sum(t)
xg.acc <- print(paste("out of fold accuracy", 1-err))
} else {
xg.acc <- NULL
}
imp <- NULL
try (imp <- xgb.importance(feature_names = bsty$feature_names, model = bsty))
}
#l <- as.data.frame(loadData())
f <- create.df.species()
dim(f)
colnames(f)
t <- f[which(f$phylum=='Tardigrada'),]
dim(t)
head(t)
table(f$species)
table(t$species)
df
s <- getAllByPhylum(df=df,phylum=phylum)
dim(s)
colnames(s)
head(s)
table(s$distinct.otus)
# for a given phylum, list how many distinct otu's there are in each sample
getNumberOfDistinctOTUSbySample <- function(df,phylum) {
df2 <- df[which(df$phylum==phylum & df$species=="'Mesobiotus furciger'"),]
z <- tapply(df2$OTU, df2$Sample, FUN = function(x) length(unique(x)))
df.z <- data.frame(Sample=rownames(z),distinct.otus=z)
# merge in the samples with zero OTUs of this phylum
all.samples <- data.frame(Sample=unique(df$Sample))
m <- merge(all.samples,df.z,by='Sample',all.x=T)
m[which(is.na(m$distinct.otus)),'distinct.otus'] <- 0
return(m)
}
doStats <- function(df,phylum,n.boots=1000,do.boots=F){
print(phylum)
beta=NULL
lasso.ci=NULL
toofew <- FALSE
s <- getAllByPhylum(df=df,phylum=phylum)
#s <- getAllByPhylumSpecies(df=df,phylum=phylum,species='Mesobiotus furciger')
presence.table <- table(s$distinct.otus>0,s$Location)
if (sum(presence.table[2,]) < 12 | sum(presence.table[1,]) < 12 )  {
toofew <- TRUE
print('too few or too many')
result <- list(phylum = phylum,
presence.table = presence.table,
beta=beta,
lasso.ci=lasso.ci,
xg.acc=xg.acc,
auc.test=auc.test,
imp=imp)
} else {
s2 <- s
ix <- which(colnames(s2) %in% c("Sample", "AMMN","NITR","PHOS","CARB","QUARTZ"))
s2 <- s2[,-ix]
s2$Mawson <- 0
s2[which(s2$Location=="Mawson Escarpment"),"Mawson"] <- 1
s2$Menzies <- 0
s2[which(s2$Location=="Mount Menzies"),"Menzies"] <- 1
s2$Location <- NULL
s2 <- s2[complete.cases(s2),]
# presence
y <- as.numeric(s2$distinct.otus > 0)
distinct.otus <- s2$distinct.otus
s2$distinct.otus <- NULL
# scale all columns
for ( j in 1:dim(s2)[2]) {
s2[,j] <- (s2[,j] - mean(s2[,j],na.rm=T)) /sqrt(var(s2[,j],na.rm=T))
}
x=as.matrix(s2)
var.names <- colnames(s2)
save(var.names,file='varnames.RData')
n = dim(x)[1]
p = dim(x)[2]
sigma = 1
# choose nfolds=n, to avoid variability from cv folds
m.cv <- cv.glmnet(x=x,y=y,family='binomial',alpha=1,nfolds = n)
best.lambda <- m.cv$lambda.min
best.lambda
mg <- glmnet(x,y,lambda=best.lambda,family='binomial',alpha=1,thresh = 1e-12)
beta = coef(mg, x=x, y=y, s=best.lambda, exact=TRUE)
if (do.boots==T) {
betas.matrix <- matrix(nrow=dim(x)[2],
ncol=n.boots)
for (b in 1: n.boots) {
if (b %% 100 == 1 ) print(b)
ixb <- sample(1:dim(x)[1],replace=T)
e <- tryCatch( {
getEst(x[ixb,],y[ixb])
},
error=function(cond) {
message(cond)
return(NA)
},
warning=function(cond) {
#message(cond)
return(NA)
})
if (b==1) {
bm <- e
} else {
bm <- cbind(bm,e)
}
}
# class(bm)
bm2 <- matrix(bm,nrow=dim(bm)[1],ncol=dim(bm)[2])
rownames(bm2) <- var.names
save(bm2,file=paste0('../boots_species/',phylum,'.RData'))
}
result <- list(phylum = phylum,
presence.table = presence.table,
toofew = toofew,
beta=beta
)
}
return(result)
}
i
all.stats[[i]] <- doStats(df=f,phylum=ph[i],n.boots=1000,do.boots=T)
print(phylum)
df2 <- df[which(df$phylum==phylum & df$species=="Mesobiotus furciger"),]
z <- tapply(df2$OTU, df2$Sample, FUN = function(x) length(unique(x)))
df.z <- data.frame(Sample=rownames(z),distinct.otus=z)
# merge in the samples with zero OTUs of this phylum
all.samples <- data.frame(Sample=unique(df$Sample))
m <- merge(all.samples,df.z,by='Sample',all.x=T)
m[which(is.na(m$distinct.otus)),'distinct.otus'] <- 0
print(phylum)
df.distinctOTUs <- getNumberOfDistinctOTUSbySample(df,phylum)[,c('Sample','distinct.otus')]
getNumberOfDistinctOTUSbySample(df,phylum)
df
df2 <- df[which(df$phylum==phylum & df$species=="Mesobiotus furciger"),]
df2
z <- tapply(df2$OTU, df2$Sample, FUN = function(x) length(unique(x)))
df.z <- data.frame(Sample=rownames(z),distinct.otus=z)
# merge in the samples with zero OTUs of this phylum
all.samples <- data.frame(Sample=unique(df$Sample))
m <- merge(all.samples,df.z,by='Sample',all.x=T)
m[which(is.na(m$distinct.otus)),'distinct.otus'] <- 0
m
m
dim(m)
colnames(m)
getNumberOfDistinctOTUSbySample(df,phylum)
phylum
df
# for a given phylum, list how many distinct otu's there are in each sample
getNumberOfDistinctOTUSbySample <- function(df,phylum) {
df2 <- df[which(df$phylum==phylum & df$species=="Mesobiotus furciger"),]
z <- tapply(df2$OTU, df2$Sample, FUN = function(x) length(unique(x)))
df.z <- data.frame(Sample=rownames(z),distinct.otus=z)
# merge in the samples with zero OTUs of this phylum
all.samples <- data.frame(Sample=unique(df$Sample))
m <- merge(all.samples,df.z,by='Sample',all.x=T)
m[which(is.na(m$distinct.otus)),'distinct.otus'] <- 0
return(m)
}
df.distinctOTUs <- getNumberOfDistinctOTUSbySample(df,phylum)[,c('Sample','distinct.otus')]
all.stats <- list()
all.stats[[i]] <- doStats(df=f,phylum=ph[i],n.boots=1000,do.boots=T)
library(glmnet)
library(pROC)
setwd("C:/Users/Michel/Documents/eukaryotes/rscripts")
source('euk_functions.R')
set.seed(123)
#l <- as.data.frame(loadData())
f <- create.df.species()
ph <- sort(unique(f$phylum))
getEst <- function(x,y) {
m.cv <- cv.glmnet(x=x,y=y,family='binomial',
grouped=F,alpha=1,nfolds = length(y))
best.lambda <- m.cv$lambda.min
m.lasso <- glmnet(x=x,y=y,lambda = best.lambda, family='binomial',alpha=1)
return(m.lasso$beta)
}
phylum
print(phylum)
beta=NULL
lasso.ci=NULL
toofew <- FALSE
s <- getAllByPhylum(df=df,phylum=phylum)
presence.table <- table(s$distinct.otus>0,s$Location)
all.stats <- list()
all.stats[[i]] <- doStats(df=f,phylum=ph[i],n.boots=1000,do.boots=T)
