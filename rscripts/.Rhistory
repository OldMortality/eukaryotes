ns <- vector()
seen <- matrix(0,nrow=N,ncol=1)
i = 1
seen <- matrix(0,nrow=N,ncol=1)
y <- rmultinom(1,size=1,prob=p)
seen <- y + seen
seen
for(j in 1:N) {
seen[j] <- min(seen[j],1)
}
seen
(identical(seen,matrix(1,nrow=N,ncol=1)))
y <- rmultinom(1,size=1,prob=p)
seen <- y + seen
for(j in 1:N) {
seen[j] <- min(seen[j],1)
}
seen
(identical(seen,matrix(1,nrow=N,ncol=1)))
seen <- y + seen
for(j in 1:N) {
seen[j] <- min(seen[j],1)
}
(identical(seen,matrix(1,nrow=N,ncol=1)))
seen <- y + seen
y <- rmultinom(1,size=1,prob=p)
y
y <- rmultinom(1,size=1,prob=p)
y
y <- rmultinom(1,size=1,prob=p)
y
y <- rmultinom(1,size=1,prob=p)
y
y <- rmultinom(1,size=1,prob=p)
y
rmultinom(1,size=1,prob=p)
p
rmultinom(1,size=1,prob=p)
rmultinom(1,size=1,prob=p)
rmultinom(1,size=1,prob=p)
?rmultinom
rmultinom(1,size=1,prob=p)
rmultinom(1,size=1,prob=p)
p
rmultinom(10,size=1,prob=p)
rmultinom(1,size=1,prob=p)
rmultinom(1,size=1,prob=p)
rmultinom(1,size=1,prob=p)
rmultinom(1,size=1,prob=p)
rmultinom(1,size=1,prob=p)
rmultinom(1,size=1,prob=p)
rmultinom(1,size=1,prob=p)
rmultinom(1,size=1,prob=p)
rmultinom(1,size=1,prob=p)
rmultinom(1,size=1,prob=p)
rmultinom(1,size=1,prob=p)
rmultinom(1,size=1,prob=p)
rmultinom(1,size=1,prob=p)
ns <- vector()
ns <- vector()
for (sim in 1:100) {
seen <- matrix(0,nrow=N,ncol=1)
for (i in 1:100) {
y <- rmultinom(1,size=1,prob=p)
seen <- y + seen
for(j in 1:N) {
seen[j] <- min(seen[j],1)
}
if (identical(seen,matrix(1,nrow=N,ncol=1))) {
ns[sim] <- i
break
}
}
}
sim
ns
mean(ns)
hist(ns)
var(ns)
t_vec <- matrix(1,nrow=2^N-1,ncol=1)
M %*% t_vec
(2 * M - I ) - t_vec
M
2 * M
2 * M - I
(2 * M - I )*t_vec - t_vec
t_vec
M <- solve(I-Q)
t_vec <- matrix(1,nrow=2^N-1,ncol=1)
M %*% t_vec
2 * M - I
t_vec
(2 * M - I ) %*% t_vec - t_vec
mean_n <- vector()
for (s in 1:100) {
ns <- vector()
for (sim in 1:100) {
seen <- matrix(0,nrow=N,ncol=1)
for (i in 1:100) {
y <- rmultinom(1,size=1,prob=p)
seen <- y + seen
for(j in 1:N) {
seen[j] <- min(seen[j],1)
}
if (identical(seen,matrix(1,nrow=N,ncol=1))) {
ns[sim] <- i
break
}
}
}
mean_n[s] <- mean(ns)
}
var(mean_n)
mean_n
hist(mean_n)
mean(mean_n)
var(mean_n)
(2 * M - I ) %*% t_vec - t_vec
var(mean_n)
one_vector <- matrix(1,nrow=2^N-1,ncol=1)
t_vec <- M %*% one_vector
t_vec
t_vec * t_vec
# variance of the expected number of steps
(2 * M - I ) %*% t_vec - t_vec * t_vec
t_vec
(2 * M - I ) %*% t_vec - t_vec * t_vec
t_vec
t_vec * t_vec
M
(2 * M - I ) %*% t_vec - t_vec * t_vec
M
2 * M
2 * M - I
(2 * M - I ) %*% t_vec
t_vec * t_vec
# variance of the expected number of steps
(2 * M - I ) %*% t_vec - t_vec * t_vec
var(mean_n)
t_vec
t_vec * t_vec
(2 * M - I ) %*% t_vec
# variance of the expected number of steps
( M - I ) %*% t_vec - t_vec * t_vec
# variance of the expected number of steps
(2 *  M - I ) %*% t_vec - t_vec * t_vec
mean_n <- vector()
for (s in 1:100) {
ns <- vector()
for (sim in 1:100) {
seen <- matrix(0,nrow=N,ncol=1)
for (i in 1:100) {
y <- rmultinom(1,size=1,prob=p)
seen <- y + seen
for(j in 1:N) {
seen[j] <- min(seen[j],1)
}
if (identical(seen,matrix(1,nrow=N,ncol=1))) {
ns[sim] <- i
break
}
}
}
mean_n[s] <- mean(ns)
}
hist(mean_n)
var(mean_n)
mean_n
mean_n <- vector()
for (s in 1:100) {
ns <- vector()
for (sim in 1:200) {
seen <- matrix(0,nrow=N,ncol=1)
for (i in 1:100) {
y <- rmultinom(1,size=1,prob=p)
seen <- y + seen
for(j in 1:N) {
seen[j] <- min(seen[j],1)
}
if (identical(seen,matrix(1,nrow=N,ncol=1))) {
ns[sim] <- i
break
}
}
}
mean_n[s] <- mean(ns)
}
hist(mean_n)
var(mean_n)
hist(mean_n)
mean_n
for (sim in 1:200) {
seen <- matrix(0,nrow=N,ncol=1)
for (i in 1:100) {
y <- rmultinom(1,size=1,prob=p)
seen <- y + seen
for(j in 1:N) {
seen[j] <- min(seen[j],1)
}
if (identical(seen,matrix(1,nrow=N,ncol=1))) {
ns[sim] <- i
break
}
}
}
ns <- vector()
for (sim in 1:200) {
seen <- matrix(0,nrow=N,ncol=1)
for (i in 1:100) {
y <- rmultinom(1,size=1,prob=p)
seen <- y + seen
for(j in 1:N) {
seen[j] <- min(seen[j],1)
}
if (identical(seen,matrix(1,nrow=N,ncol=1))) {
ns[sim] <- i
break
}
}
}
ns
hist(ns)
mean(ns)
var(ns)
ns <- vector()
for (sim in 1:1000) {
seen <- matrix(0,nrow=N,ncol=1)
for (i in 1:100) {
y <- rmultinom(1,size=1,prob=p)
seen <- y + seen
for(j in 1:N) {
seen[j] <- min(seen[j],1)
}
if (identical(seen,matrix(1,nrow=N,ncol=1))) {
ns[sim] <- i
break
}
}
}
hist(ns)
var(ns)
mean(ns)
# variance of the expected number of steps
(2 *  M - I ) %*% t_vec - t_vec * t_vec
mean(ns)
var(ns)
sd(ns)
mean(ns)
hist(ns,prob=T)
hist(ns,probability=T)
hist(ns,probability = T)
ns
hist(ns,probability = T)
ns
hist(ns)
hist(ns,probability = T)
hist(ns,probability = T)
ns
hist(ns)
hist(ns,probability = T)
class(ns)
hist(as.numeric(ns),probability = T)
hist(as.float(ns),probability = T)
hist(1.0 * ns,probability = T)
class(1.0 * ns)
hist(data.frame(x=ns),probability = T)
hist(data.frame(x=as.numeric(ns)),probability = T)
d <- data.frame(x=as.numeric(ns))
hist(d$x,probability = T)
ggplot(data=d) + geom_density(aes(x=x))
library(ggplot2)
ggplot(data=d) + geom_density(aes(x=x))
ggplot(data=d) + geom_density(aes(x=x))
ggplot(data=d) + geom_density(aes(x=x))
rchisq(1000,df=mean(d$x)))
rchisq(1000,df=mean(d$x))
+ geom_density(data=data.frame(x=rchisq(1000,df=mean(d$x)),aes(x=x),col='red'))
c <- data.frame(x=rchisq(1000,df=mean(d$x))
ggplot(data=d) + geom_density(aes(x=x))
+ geom_density(data=,aes(x=x),col='red'))
c <- data.frame(x=rchisq(1000,df=mean(d$x)))
c
ggplot(data=d) + #geom_density(aes(x=x))
+ geom_density(data=c,aes(x=x),col='red')
#geom_density(aes(x=x))
ggplot(data=d) + geom_density(data=c,aes(x=x),col='red')
#
ggplot() + geom_density(data=c,aes(x=x),col='red') +
geom_density(data=d,aes(x=x))
ns <- vector()
for (sim in 1:10000) {
seen <- matrix(0,nrow=N,ncol=1)
for (i in 1:100) {
y <- rmultinom(1,size=1,prob=p)
seen <- y + seen
for(j in 1:N) {
seen[j] <- min(seen[j],1)
}
if (identical(seen,matrix(1,nrow=N,ncol=1))) {
ns[sim] <- i
break
}
}
}
d <- data.frame(x=as.numeric(ns))
hist(d$x,probability = T)
var(ns)
sd(ns)
mean(ns)
library(ggplot2)
c <- data.frame(x=rchisq(1000,df=mean(d$x)))
#
ggplot() + geom_density(data=c,aes(x=x),col='red') +
geom_density(data=d,aes(x=x))
ns <- vector()
for (sim in 1:10000) {
seen <- matrix(0,nrow=N,ncol=1)
for (i in 1:100) {
y <- rmultinom(1,size=1,prob=p)
seen <- y + seen
for(j in 1:N) {
seen[j] <- min(seen[j],1)
}
if (identical(seen,matrix(1,nrow=N,ncol=1))) {
ns[sim] <- i
break
}
}
}
quantile(ns,0.95)
mean(ns)
sd(ns)
mean(ns) + 2 * sd(ns)
dff
rm(list=ls())
setwd("C:/Users/michel/Documents/eukaryotes/rscripts")
library(dplyr)
library(edgeR)
source("euk_functions.R")
#save.image(file='after_mc.rdata')
load(file='after_mc.rdata')
m <- merge(results,dff,by.x='Sample',by.y='sample')
head(m)
missed <- m[which(m$mn>m$sample_abundance),]
nrow(missed)
dd <- d[which(d$Sample==missed$Sample[8]),c("Abundance","phylum")]
d3 <- dd %>%
group_by(phylum) %>%
summarise(occs = sum(Abundance)) %>% as.data.frame()
d3
dd <- d[which(d$Sample==missed$Sample[2]),c("Abundance","phylum")]
d3 <- dd %>%
group_by(phylum) %>%
summarise(occs = sum(Abundance)) %>% as.data.frame()
d3
dd <- d[which(d$Sample==missed$Sample[4]),c("Abundance","phylum")]
d3 <- dd %>%
group_by(phylum) %>%
summarise(occs = sum(Abundance)) %>% as.data.frame()
d3
dd <- d[which(d$Sample==missed$Sample[1]),c("Abundance","phylum")]
d3 <- dd %>%
group_by(phylum) %>%
summarise(occs = sum(Abundance)) %>% as.data.frame()
d3
samples
samples[1]
samples[1,1]
samples[1]
dd <- d[which(d$Sample==samples[1]),c("Abundance","phylum")]
d3 <- dd %>%
group_by(phylum) %>%
summarise(occs = sum(Abundance)) %>% as.data.frame()
d3
samples[1]
head(m)
missed <- m[which(m$mn>m$sample_abundance),]
nrow(missed)
head(m)
#save.image(file='after_mc.rdata')
load(file='after_mc.rdata')
m <- merge(results,dff,by.x='Sample',by.y='sample')
head(m)
missed <- m[which(m$mn>m$sample_abundance),]
nrow(missed)
dd <- d[which(d$Sample==missed$Sample[1]),c("Abundance","phylum")]
d3 <- dd %>%
group_by(phylum) %>%
summarise(occs = sum(Abundance)) %>% as.data.frame()
d3
save.image(file='after_mc2.rdata')
knitr::opts_chunk$set(echo = FALSE, warning = F, message = F)
load(file="after_loop.rdata")
library(knitr)
library(kableExtra)
library(dplyr)
library(ggplot2)
m
colnames(m)
m <- merge(results,dff,by.x='Sample',by.y='sample')
head(m)
missed <- m[which(m$mn>m$sample_abundance),]
nrow(missed)
dd <- d[which(d$Sample==missed$Sample[1]),c("Abundance","phylum")]
d3 <- dd %>%
group_by(phylum) %>%
summarise(occs = sum(Abundance)) %>% as.data.frame()
d3
save.image(file='after_mc2.rdata')
colnames(m)
knitr::opts_chunk$set(echo = FALSE, warning = F, message = F)
load(file="after_loop.rdata")
load(file="after_mc2.rdata")
library(knitr)
library(kableExtra)
library(dplyr)
library(ggplot2)
colnames(results)[which(colnames(results)=="Highest_Sim")] <- "p100"
kable(m, longtable = T, booktabs  = T, caption   = "Longtable") %>%
kable_styling(latex_options = c("repeat_header"),
repeat_header_continued = "\\textit{(Continued on Next Page...)}")
colnames(m)[which(colnames(results)=="Highest_Sim")] <- "p100"
colnames(m)[which(colnames(results)=="sample_abundance")] <- "Sample Abundance"
kable(m, longtable = T, booktabs  = T, caption   = "Longtable") %>%
kable_styling(latex_options = c("repeat_header"),
repeat_header_continued = "\\textit{(Continued on Next Page...)}")
m <- m[,c("Sample","n phyla","sample_abundance", "p95","Highest_Sim","frac","mn")]
colnames(m)
m <- merge(results,dff,by.x='Sample',by.y='sample')
save.image(file='after_mc2.rdata')
m["mn_less_than_actual"] <- ifelse(m$mn<m$sample_abundance,'X','')
table(m$mn_less_than_actual)
m["mn_less_than_actual"] <- ifelse(m$mn<m$sample_abundance,'','X')
table(m$mn_less_than_actual)
colnames(m)
m$mn
m$sample_abundance
m$mn<m$sample_abundance
knitr::opts_chunk$set(echo = FALSE, warning = F, message = F)
load(file="after_loop.rdata")
load(file="after_mc2.rdata")
library(knitr)
library(kableExtra)
library(dplyr)
library(ggplot2)
m$mn<m$sample_abundance
m[,c("Sample","n phyla","sample_abundance", "p95","Highest_Sim","frac","mn")]
colnames(m)
#save.image(file='after_mc.rdata')
load(file='after_mc.rdata')
m <- merge(results,dff,by.x='Sample',by.y='sample')
head(m)
missed <- m[which(m$mn>m$sample_abundance),]
nrow(missed)
dd <- d[which(d$Sample==missed$Sample[1]),c("Abundance","phylum")]
d3 <- dd %>%
group_by(phylum) %>%
summarise(occs = sum(Abundance)) %>% as.data.frame()
d3
save.image(file='after_mc2.rdata')
knitr::opts_chunk$set(echo = FALSE, warning = F, message = F)
load(file="after_loop.rdata")
load(file="after_mc2.rdata")
library(knitr)
library(kableExtra)
library(dplyr)
library(ggplot2)
m["mn_less_than_actual"] <- ifelse(m$mn<m$sample_abundance,'','X')
m <- m[,c("Sample","n phyla","sample_abundance", "p95","Highest_Sim","frac","mn")]
colnames(m)[which(colnames(m)=="Highest_Sim")] <- "p100"
colnames(m)[which(colnames(m)=="sample_abundance")] <- "Sample Abundance"
kable(m, longtable = T, booktabs  = T, caption   = "Longtable") %>%
kable_styling(latex_options = c("repeat_header"),
repeat_header_continued = "\\textit{(Continued on Next Page...)}")
m$mn <- round(m$mn)
kable(m, longtable = T, booktabs  = T, caption   = "Longtable") %>%
kable_styling(latex_options = c("repeat_header"),
repeat_header_continued = "\\textit{(Continued on Next Page...)}")
m <- m[,c("Sample","n phyla","sample_abundance", "p95","Highest_Sim","frac","mn","mn_less_than_actual" )]
m["mn_less_than_actual"] <- ifelse(m$mn<m$sample_abundance,'','X')
m$mn <- round(m$mn)
m <- m[,c("Sample","n phyla","sample_abundance", "p95","Highest_Sim","frac","mn","mn_less_than_actual" )]
knitr::opts_chunk$set(echo = FALSE, warning = F, message = F)
load(file="after_loop.rdata")
load(file="after_mc2.rdata")
library(knitr)
library(kableExtra)
library(dplyr)
library(ggplot2)
m["mn_less_than_actual"] <- ifelse(m$mn<m$sample_abundance,'','X')
m$mn <- round(m$mn)
m <- m[,c("Sample","n phyla","sample_abundance", "p95","Highest_Sim","frac","mn","mn_less_than_actual" )]
colnames(m)[which(colnames(m)=="Highest_Sim")] <- "p100"
colnames(m)[which(colnames(m)=="sample_abundance")] <- "Sample Abundance"
kable(m, longtable = T, booktabs  = T, caption   = "Longtable") %>%
kable_styling(latex_options = c("repeat_header"),
repeat_header_continued = "\\textit{(Continued on Next Page...)}")
g <- ggplot(data=results) + geom_histogram(aes(x=frac),fill='steelblue') +
ggtitle("Required read depth as fraction of actual read depth")
g
class(long_dt)
long_dt <- rbind(mtcars, mtcars)
long_dt
class(long_dt)
class(m)
#save.image(file='after_mc.rdata')
load(file='after_mc.rdata')
m <- merge(results,dff,by.x='Sample',by.y='sample')
#save.image(file='after_mc.rdata')
load(file='after_mc.rdata')
knitr::opts_chunk$set(echo = TRUE)
load(file="after_mc.rdata")
